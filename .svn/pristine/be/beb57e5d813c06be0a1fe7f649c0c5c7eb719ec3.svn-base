package com.aotain.smmsapi.task.prevalidate.service.impl;

import com.alibaba.fastjson.JSON;
import com.aotain.common.config.LocalConfig;
import com.aotain.common.utils.kafka.JobQueueUtil;
import com.aotain.common.utils.kafka.KafkaProducer;
import com.aotain.common.utils.model.msg.JobQueue;
import com.aotain.common.utils.model.msg.RedisTaskStatus;
import com.aotain.common.utils.redis.TaskIdUtil;
import com.aotain.common.utils.redis.TaskMessageUtil;
import com.aotain.cu.serviceapi.model.*;
import com.aotain.smmsapi.task.constant.DealFlagConstant;
import com.aotain.smmsapi.task.constant.GlobalParams;
import com.aotain.smmsapi.task.prevalidate.mapper.PreCommonDao;
import com.aotain.smmsapi.task.prevalidate.mapper.PreValidateHouseDao;
import com.aotain.smmsapi.task.prevalidate.service.PreValidateHouse;
import net.bytebuddy.asm.Advice;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.*;

@Service
public class PreValidateHouseImpl implements PreValidateHouse {

    private static Logger logger = LoggerFactory.getLogger(PreValidateHouseImpl.class);

    @Autowired
    private PreValidateHouseDao preValidateHouseDao;

    @Autowired
    private PreCommonDao preCommonDao;

    @Override
    public void handleValidateHouse() {
        try {
            List<HouseInformation> houseInformations = preValidateHouseDao.getValidateHouseList(new HouseInformation());
            if(houseInformations!=null && !houseInformations.isEmpty()){
                for (HouseInformation houseInformation:houseInformations){
                    handHouseInfo(houseInformation);
                }
            }
        }catch (Exception e){
            logger.error("handle validate House error ",e);
        }

    }
    @Transactional(propagation = Propagation.REQUIRED,rollbackFor = Exception.class)
    @Override
    public boolean handHouseInfo( HouseInformation houseInformation){
        if (houseInformation==null) return false;
        int houseNum;
        HouseInformation house = new HouseInformation();
        switch (houseInformation.getOperateType()){
            //新增
            case 1:
                house.setHouseIdStr(houseInformation.getHouseIdStr());
                house.setHouseName(houseInformation.getHouseName());
                houseNum = preValidateHouseDao.houseNum(house);
                if(houseNum>0){
                    //正式表存在该机房 核验失败 写数据库
                    houseInformation.setVerificationResult("正式表存在该机房,新增失败");
                    handVarifyFail(houseInformation,null);
                    return false;
                }else {
//                    validateIdc(houseInformation);
                    //获取用户信息
                    List<UserInformation> users = preValidateHouseDao.getPreUsers(houseInformation);
                    if (users==null || users.isEmpty()){
                        handVarifyPass(houseInformation,null);
                    }else {
                        List<UserInformation> userInformations=new ArrayList<UserInformation>();
                        for (UserInformation userInformation:users){
                            //0 1 3 6
                            if(userInformation.getDealFlag().intValue()==DealFlagConstant.UN_PRE_VARIFY.getDealFlag()
                                    || userInformation.getDealFlag().intValue()==DealFlagConstant.PRE_VARIFY_FAIL.getDealFlag()
                                    || userInformation.getDealFlag().intValue()==DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag()
                                    || userInformation.getDealFlag().intValue()==DealFlagConstant.UN_PRE_VARIFY.getDealFlag()){
//                                userInformation.setVerificationResult(DealFlagConstant.getDealDesc(userInformation.getDealFlag().intValue()));
                                userInformations.add(userInformation);
                            }
                        }
                        if(userInformations.isEmpty()){
                            //没有需要等待的
                            handVarifyPass(houseInformation,userInformations);
                            return true;
                        }else {
                            //需要等待,不做任何操作
                            return false;
                        }
                    }
                }
                break;
                //修改
            case 2:
                house.setHouseId(houseInformation.getHouseId());
                houseNum = preValidateHouseDao.houseNum(house);
                if(houseNum!=1){
                    //正式表不存在该机房 核验失败 写数据库
                    houseInformation.setVerificationResult("正式表不存在该机房,修改失败");
                    handVarifyFail(houseInformation,null);
                    return false;
                }else {
                    //机架信息,操作表
                    List<HouseUserFrameInformation> userFrameInformations = houseInformation.getUserFrameList();
                    //Ip信息,操作表
                    List<HouseIPSegmentInformation> ipSegmentInformations = houseInformation.getIpSegList();
                    //正式表存在该机房 ,identity==1？提取机房IP地址的所属客户信息:提取机房IP地址的所属客户信息+提取机房机架的所属客户信息
                    List<UserInformation> preUsers=null;
                    if (houseInformation.getIdentity()!=1){
//                      提取机房IP地址的所属客户信息+提取机房机架的所属客户信息
                        preUsers = preValidateHouseDao.getPreUsers(houseInformation);
                    }else {
                        //提取机房IP地址的所属客户信息
                        houseInformation.setUserFrameList(new ArrayList<HouseUserFrameInformation>());
                        preUsers = preValidateHouseDao.getPreUsers(houseInformation);
                    }
                    //提取正式表的,该机房的信息
                    HouseInformation rptHouse = preValidateHouseDao.getRptHouse(houseInformation);
                    List<UserInformation> rptUsers = preValidateHouseDao.getRptUsers(rptHouse);
                    //preUsers:操作表中挂在机房下面的用户 rptUsers:正式表中挂在机房下面的用户

                    List<UserInformation> addUsers = new ArrayList<UserInformation>();
                    List<UserInformation> modifyUser = new ArrayList<UserInformation>();
                    List<UserInformation> deleteUsers = new ArrayList<UserInformation>();

                    //modifyUser 是操作表和上报表共有的用户,改用户有状态Deal_flag
                    for (UserInformation preUser:preUsers){
                        for (UserInformation rptUser:rptUsers){
                            if (preUser.getUserId().intValue()== rptUser.getUserId().intValue()){
                                modifyUser.add(preUser);
                            }
                        }
                    }
                    //addUsers 是在操作表,但是不存在上报表的用户,改用户有状态Deal_flag
                    addUsers.addAll(preUsers);
                    addUsers.removeAll(modifyUser);
                    //deleteUsers 是不在操作表,但是存在上报表的用户,改用户没有有状态Deal_flag,需要重新在操作表中获取
                    deleteUsers.addAll(rptUsers);
                    deleteUsers.removeAll(modifyUser);
                    deleteUsers = preValidateHouseDao.getPreUsersByRptUser(deleteUsers);
                    if (!modifyUser.isEmpty()){
                        for (UserInformation userInformation:modifyUser){
                            if(userInformation.getDealFlag().intValue()!=DealFlagConstant.RPT_FAIL.getDealFlag()
                                    || userInformation.getDealFlag().intValue()!=DealFlagConstant.RPT_VARIFY.getDealFlag()){
                                //如存在状态不是上报成功或者上报审核中的记录,等待
                                return false;
                            }
                            userInformation.setOperateType(2);
                        }
                    }
                    if (!addUsers.isEmpty()){
                        for (UserInformation userInformation:addUsers){
                            if(userInformation.getDealFlag().intValue()!=DealFlagConstant.RPT_FAIL.getDealFlag()
                                    || userInformation.getDealFlag().intValue()!=DealFlagConstant.RPT_VARIFY.getDealFlag()){
                                //如存在状态不是上报成功或者上报审核中的记录,等待
                                return false;
                            }
                            userInformation.setOperateType(1);

                        }
                    }
                    if (!deleteUsers.isEmpty()){
                        for (UserInformation userInformation:deleteUsers){
                            if(userInformation.getDealFlag().intValue()!=DealFlagConstant.RPT_FAIL.getDealFlag()
                                    || userInformation.getDealFlag().intValue()!=DealFlagConstant.RPT_VARIFY.getDealFlag()){
                                //如存在状态不是上报成功或者上报审核中的记录,等待
                                return false;
                            }
                            userInformation.setOperateType(3);
                        }
                    }
                    modifyUser.addAll(deleteUsers);
                    modifyUser.addAll(addUsers);
                    handVarifyPass(houseInformation,modifyUser);
                    return true;
                }
            case 3:
                house.setHouseId(houseInformation.getHouseId());
                houseNum = preValidateHouseDao.houseNum(house);
                if(houseNum!=1){
                    //正式表不存在该机房 核验失败 写数据库
                    houseInformation.setVerificationResult("正式表不存在该机房，删除失败");
                    handVarifyFail(houseInformation,null);
                    return false;
                }
//                提取机房IP地址的所属客户信息+提取机房机架的所属客户信息
                List<UserInformation> preUsers = preValidateHouseDao.getPreUsers(houseInformation);

                if (preUsers!=null && !preUsers.isEmpty()){
                    for (UserInformation userInformation:preUsers){
                        //非上报审核中 或者非上报成功的
                        if (userInformation.getDealFlag().intValue()!=DealFlagConstant.RPT_VARIFY.getDealFlag()
                                || userInformation.getDealFlag().intValue()!=DealFlagConstant.RPT_SUCCESS.getDealFlag()){
                            //核验不成功，等待
                            return false;
                        }
                        handVarifyPass(houseInformation,preUsers);
                        return true;
                    }
                }
                break;
        }
        return false;
    }

    public void handVarifyPass(HouseInformation houseInformation,List<UserInformation> userInformations){
        //写操作表
        houseInformation.setDealFlag(DealFlagConstant.SUB_RPT.getDealFlag());
        preValidateHouseDao.submitHouse(houseInformation);
        //写记录表
        preCommonDao.writeLog(houseInformation);
        //写等待表---主表
        preValidateHouseDao.writeHouseLog(houseInformation);
        //写等待表---IP地址信息表
        List<HouseIPSegmentInformation> ips = houseInformation.getIpSegList();
        if (ips!=null && ips.size()>0){
            for (HouseIPSegmentInformation ipSegmentInformation:ips){
                ipSegmentInformation.setSubmitId(houseInformation.getSubmitId());
                ipSegmentInformation.setHouseseqId(houseInformation.getHouseseqId());
                preValidateHouseDao.writeHouseIpLog(ipSegmentInformation);
            }
        }
        //写等待表---机架表
        List<HouseFrameInformation> frams = houseInformation.getFrameList();
        if (frams!=null && frams.size()>0){
            for (HouseFrameInformation frameInformation:frams){
                frameInformation.setSubmitId(houseInformation.getSubmitId());
                frameInformation.setHouseseqId(houseInformation.getHouseseqId());
                preValidateHouseDao.writeHouseFrameLog(frameInformation);
            }
        }
        //写等待表---机架用户表
        List<HouseUserFrameInformation> userFrams = houseInformation.getUserFrameList();
        if (userFrams!=null && userFrams.size()>0){
            for (HouseUserFrameInformation userFrameInformation:userFrams){
                userFrameInformation.setHouseseqId(houseInformation.getHouseseqId());
                preValidateHouseDao.writeHouseUserFrameLog(userFrameInformation);
            }
        }

        //写等待表---机架用户表
        List<HouseGatewayInformation> gatewayInfoList = houseInformation.getGatewayInfoList();
        if (gatewayInfoList!=null && gatewayInfoList.size()>0){
            for (HouseGatewayInformation houseGatewayInformation:gatewayInfoList){
                houseGatewayInformation.setHouseseqId(houseInformation.getHouseseqId());
                preValidateHouseDao.writeHouseGatewayLog(houseGatewayInformation);
            }
        }

        //write kafka
        JobQueue jobQueue = new JobQueue();
        //param 是 submitId
        Map<String ,Long> map=new HashMap<String ,Long>();
        map.put("submitId",houseInformation.getSubmitId());
        jobQueue.setParams(JSON.toJSONString(map));
        RedisTaskStatus redisTaskStatus = new RedisTaskStatus();
        Long taskId = TaskIdUtil.getInstance().getTaskId();
        jobQueue.setJobtype(GlobalParams.UPLOAD_BASIC_DATTA_RPT);
        jobQueue.setTaskid(taskId);
        jobQueue.setToptaskid(taskId);
        jobQueue.setIsretry(0);
        jobQueue.setCreatetime(System.currentTimeMillis()/1000);
        JobQueueUtil.sendMsgToKafkaJobQueue(jobQueue);
        // 写入redis任务信息hash
        redisTaskStatus.setToptaskid(taskId);
        redisTaskStatus.setTaskid(taskId);
        redisTaskStatus.setTasktype(1); // JOB任务
        redisTaskStatus.setContent(JSON.toJSONString(jobQueue));
        redisTaskStatus.setCreatetime(System.currentTimeMillis()/1000);
        redisTaskStatus.setStatus(1); // 开始
        redisTaskStatus.setTimes(1);  // 从1开始
        TaskMessageUtil.getInstance().setTask(taskId, redisTaskStatus);
    }

    public void handVarifyFail(HouseInformation houseInformation,List<UserInformation> userInformations){
        houseInformation.setDealFlag(DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag());
        preValidateHouseDao.submitHouse(houseInformation);
    }
}
