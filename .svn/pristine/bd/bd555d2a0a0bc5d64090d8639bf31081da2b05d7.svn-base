package com.aotain.smmsapi.task.prevalidate.service.impl;

import com.alibaba.fastjson.JSON;
import com.aotain.common.utils.kafka.JobQueueUtil;
import com.aotain.common.utils.model.msg.JobQueue;
import com.aotain.common.utils.model.msg.RedisTaskStatus;
import com.aotain.common.utils.redis.TaskIdUtil;
import com.aotain.common.utils.redis.TaskMessageUtil;
import com.aotain.cu.serviceapi.model.*;
import com.aotain.cu.utils.ThreadLocalUtil;
import com.aotain.smmsapi.task.constant.DealFlagConstant;
import com.aotain.smmsapi.task.constant.GlobalParams;
import com.aotain.smmsapi.task.prevalidate.mapper.PreCommonDao;
import com.aotain.smmsapi.task.prevalidate.mapper.PreValidateHouseDao;
import com.aotain.smmsapi.task.prevalidate.mapper.PreValidateIdcDao;
import com.aotain.smmsapi.task.prevalidate.mapper.PreValidateUserDao;
import com.aotain.smmsapi.task.prevalidate.service.PreValidateIdc;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
public class PreValidateIdcImpl implements PreValidateIdc{

    private static Logger logger = LoggerFactory.getLogger(PreValidateIdcImpl.class);

    @Autowired
    private PreValidateIdcDao preValidateIdcDao;
    @Autowired
    private PreValidateHouseDao preValidateHouseDao;
    @Autowired
    private PreValidateUserDao preValidateUserDao;
    @Autowired
    private PreCommonDao preCommonDao;
    @Autowired
    private PreValidateUserImpl preValidateUser;
    @Autowired
    private PreValidateHouseImpl preValidateHouse;

    /**
     * 级联预审，单独预审，用户，机房预审的总入口
     */
    @Override
    public void handleValidateIdc() {
        try {
            List<IdcInformation> idcInformations = preValidateIdcDao.getValidateIdcList(new IdcInformation());
            if(idcInformations!=null && !idcInformations.isEmpty()){
                for (IdcInformation idcInformation:idcInformations){
                    if (idcInformation.getDealFlag().intValue()==DealFlagConstant.RPT_VARIFY.getDealFlag()){
                        handIncInfo(idcInformation);
                    }else {
                        validateAndWrite(idcInformation,false);
                    }
                }
            }
        }catch (Exception e){
            logger.error("handle validate JYZ error ",e);
        }
    }

    /**
     * 验证机房和用户,成功的统一写库
     * @param idcInformation
     */
    @Transactional(propagation = Propagation.REQUIRED,rollbackFor = Exception.class)
    public void validateAndWrite( IdcInformation idcInformation,boolean updateIdcVerRst){

        //将经营者信息传给用户机房
        preValidateUser.setIdcInformation(idcInformation);
        preValidateHouse.setIdcInformation(idcInformation);
        //走机房用户校验的总入口
        preValidateHouse.handleValidateHouse();


        long houseSuccessCnt = ThreadLocalUtil.get("houseSuccessCnt")!=null?(long)ThreadLocalUtil.get("houseSuccessCnt"):0;
        long houseFailCnt = ThreadLocalUtil.get("houseTotalCnt")!=null?(long)ThreadLocalUtil.get("houseTotalCnt") - houseSuccessCnt:0;
        long userSuccessCnt =ThreadLocalUtil.get("userSuccessCnt")!=null?(long)ThreadLocalUtil.get("userSuccessCnt"):0;
        long userFailCnt =ThreadLocalUtil.get("userFailCnt")!=null? (long)ThreadLocalUtil.get("userFailCnt"):0;

//        if (houseSuccessCnt>0 || userSuccessCnt>0){
            //先写记录表和jyz信息,经营者预审
            if (updateIdcVerRst){
                idcInformation.setVerificationResult(String.format("机房信息已预审通过%s个，还有%s审核不通过！\r\n 用户信息已预审通过%s个，还有%s审核不通过！",houseSuccessCnt,houseFailCnt,userSuccessCnt,userFailCnt));
                handVarifyPass(idcInformation);
            }else {
                //经营者没有提交预审
                if (houseSuccessCnt>0 || userSuccessCnt>0){
                    IdcInformation mation = new IdcInformation();
                    mation.setIdcId(idcInformation.getIdcId());
                    mation.setOperateType(idcInformation.getOperateType());
                    mation.setIdcId(idcInformation.getIdcId());
                    handVarifyPass(idcInformation);
                }else {
                    return;
                }
            }

            //获取需要写库的用户和机房
            List<HouseInformation> houseInformationList = preValidateHouse.getHouseBatchConstructs();
            List<UserInformation> userBatchConstructs = preValidateUser.getUserBatchConstructs();
            if (!houseInformationList.isEmpty()){
                for (HouseInformation houseInformation:houseInformationList){
                    houseInformation.setSubmitId(idcInformation.getSubmitId());
                    writeHouseSuccessLog(houseInformation);
                }
            }
            if (!userBatchConstructs.isEmpty()){
                for (UserInformation userInformation:userBatchConstructs){
                    userInformation.setSubmitId(idcInformation.getSubmitId());
                    writeUserSuccessLog(userInformation);
                }
            }
//        }else {
//            if (updateIdcVerRst){
//                idcInformation.setVerificationResult(String.format("机房信息已预审通过%s个，还有%s审核不通过！\r\n 用户信息已预审通过%s个，还有%s审核不通过！",0,houseFailCnt,0,userFailCnt));
//            }
//            handVarifyFail(idcInformation);
//        }
        logger.info("current pre validate finish ... ...");
    }

    /**
     * 核验经营者
     * @param idcInformation
     */
    public void handIncInfo(IdcInformation idcInformation){
        if (idcInformation==null) return;
        if (idcInformation.getOperateType()==null) return;

        int jyzNum;
        switch (idcInformation.getOperateType()){
            //新增
            case 1:
                IdcInformation information = new IdcInformation();
                information.setIdcName(idcInformation.getIdcName());
                information.setIdcId(idcInformation.getIdcId());
                jyzNum = preValidateIdcDao.jyzNum(information);
                if(jyzNum>0){
                    //正式表存在经营者 核验失败 写数据库
                    idcInformation.setVerificationResult("正式表已经存在经营者");
                    handVarifyFail(idcInformation);
                }else {
                    validateIdc(idcInformation);
                }
                break;
            case 2:
                //修改
                IdcInformation info =  new IdcInformation();
                info.setJyzId(idcInformation.getJyzId());
                jyzNum = preValidateIdcDao.jyzNum(info);
                if(jyzNum!=1){
                    //正式表不存在经营者 核验失败 写数据库
                    idcInformation.setVerificationResult("正式表不存在该经营者");
                    handVarifyFail(idcInformation);
                }else {
                    validateIdc(idcInformation);
                }
                break;
            case 3:
                //删除
                IdcInformation paramInfo =  new IdcInformation();
                paramInfo.setJyzId(idcInformation.getJyzId());
                jyzNum = preValidateIdcDao.jyzNum(paramInfo);
                if(jyzNum==1){
                    //核验成功 -->提交上报
                    validateIdc(idcInformation);
                }else {
                    //核验失败
                    idcInformation.setVerificationResult("正式表不存在该经营者");
                    handVarifyFail(idcInformation);
                }
                break;
        }
    }

    @Transactional(propagation = Propagation.REQUIRED,rollbackFor = Exception.class)
    public void validateIdc(IdcInformation idcInformation){
//        if (idcInformation.getReportType()!=null && idcInformation.getReportType()==0){
            //获取(上报审核中)机房主体列表
            List<HouseInformation> houseInformations = idcInformation.getHouseList();
            //获取(上报审核中)用户主体列表
            List<UserInformation> userInformations = idcInformation.getUserList();
            //机房或者用户为空 -->审核通过
            if ( (houseInformations==null || houseInformations.isEmpty())
                    && (userInformations==null || userInformations.isEmpty())){
                //机房或者用户为空,直接提交经营者预审
                handVarifyPass(idcInformation);
            }else {
                validateAndWrite(idcInformation,true);
            }
//        }else if (idcInformation.getReportType()!=null &&  idcInformation.getReportType()==1){
//            //单独上报
//            if(true){
//                //完整性核验(暂无) -->提交上报
//                handVarifyPass(idcInformation);
//            }else {
//                //核验失败
//                idcInformation.setVerificationResult("不完整");
//                handVarifyFail(idcInformation);
//            }
//        }else {
//            //核验失败 写数据库
//            idcInformation.setVerificationResult("上报类型有误");
//            handVarifyFail(idcInformation);
//        }
    }

    public void handVarifyPass(IdcInformation idcInformation){

        idcInformation.setDealFlag(DealFlagConstant.SUB_RPT.getDealFlag());
        preValidateIdcDao.submitJyz(idcInformation);

        preCommonDao.writeLog(idcInformation);

        //写上报等待表
        idcInformation.setCreateTime(new Date());
        idcInformation.setUpdateTime(new Date());
        preValidateIdcDao.writeIdcLog(idcInformation);

        //write kafka
        JobQueue jobQueue = new JobQueue();
        //param 是 submitId
        Map<String ,Long> map=new HashMap<String ,Long>();
        map.put("submitId",idcInformation.getSubmitId());
        jobQueue.setParams(JSON.toJSONString(map));
        RedisTaskStatus redisTaskStatus = new RedisTaskStatus();
        Long taskId = TaskIdUtil.getInstance().getTaskId();
        jobQueue.setJobtype(GlobalParams.UPLOAD_BASIC_DATTA_RPT);
        jobQueue.setTaskid(taskId);
        jobQueue.setToptaskid(0l);
        jobQueue.setIsretry(0);
        jobQueue.setCreatetime(System.currentTimeMillis()/1000);
        JobQueueUtil.sendMsgToKafkaJobQueue(jobQueue);
        // 写入redis任务信息hash
        redisTaskStatus.setToptaskid(taskId);
        redisTaskStatus.setTaskid(taskId);
        redisTaskStatus.setTasktype(1); // JOB任务
        redisTaskStatus.setContent(JSON.toJSONString(jobQueue));
        redisTaskStatus.setCreatetime(System.currentTimeMillis()/1000);
        redisTaskStatus.setStatus(1); // 开始
        redisTaskStatus.setTimes(1);  // 从1开始
        TaskMessageUtil.getInstance().setTask(taskId, redisTaskStatus);

    }

    /**
     * 机房主体写等待表
     * @param houseInformation
     * @return
     */
    public DealFlagConstant.StatusEnum writeHouseSuccessLog( HouseInformation houseInformation){
        //写操作表
        houseInformation.setDealFlag(DealFlagConstant.SUB_RPT.getDealFlag());
        preValidateHouseDao.submitHouse(houseInformation);

        //写记录表
//        preCommonDao.writeLog(houseInformation);
        //写等待表---主表
        preValidateHouseDao.writeHouseLog(houseInformation);
        //写等待表---IP地址信息表
        List<HouseIPSegmentInformation> ips = houseInformation.getIpSegList();
        if (ips!=null && ips.size()>0){
            for (HouseIPSegmentInformation ipSegmentInformation:ips){
                ipSegmentInformation.setSubmitId(houseInformation.getSubmitId());
                ipSegmentInformation.setHouseseqId(houseInformation.getHouseseqId());
                preValidateHouseDao.writeHouseIpLog(ipSegmentInformation);
                ipSegmentInformation.setDealFlag(DealFlagConstant.SUB_RPT.getDealFlag());
                preValidateHouseDao.submitHouseIpseg(ipSegmentInformation);
            }
        }
        //写等待表---机架表
        List<HouseFrameInformation> frams = houseInformation.getFrameList();
        if (frams!=null && frams.size()>0){
            for (HouseFrameInformation frameInformation:frams){
                frameInformation.setSubmitId(houseInformation.getSubmitId());
                frameInformation.setHouseseqId(houseInformation.getHouseseqId());
                preValidateHouseDao.writeHouseFrameLog(frameInformation);
                frameInformation.setDealFlag(DealFlagConstant.ChildDealFlagEum.UN_UPLOAD.getValue());
                preValidateHouseDao.submitHouseFrame(frameInformation);
            }
        }
        //写等待表---机架用户表
        List<HouseUserFrameInformation> userFrams = houseInformation.getUserFrameList();
        if (userFrams!=null && userFrams.size()>0){
            for (HouseUserFrameInformation userFrameInformation:userFrams){
                userFrameInformation.setHouseseqId(houseInformation.getHouseseqId());
                preValidateHouseDao.writeHouseUserFrameLog(userFrameInformation);
            }
        }

        //写等待表---机架链路表
        List<HouseGatewayInformation> gatewayInfoList = houseInformation.getGatewayInfoList();
        if (gatewayInfoList!=null && gatewayInfoList.size()>0){
            for (HouseGatewayInformation houseGatewayInformation:gatewayInfoList){
                houseGatewayInformation.setHouseseqId(houseInformation.getHouseseqId());
                preValidateHouseDao.writeHouseGatewayLog(houseGatewayInformation);
                houseGatewayInformation.setDealFlag(DealFlagConstant.ChildDealFlagEum.UN_UPLOAD.getValue());
                preValidateHouseDao.submitHouseGateway(houseGatewayInformation);
            }
        }
        return DealFlagConstant.StatusEnum.SUCCESS;
    }


    /**
     * 处理成功上报的用户，写等待表
     * @param userInformation
     */
    public void writeUserSuccessLog( UserInformation userInformation){
        //更新操作表状态
        userInformation.setDealFlag(DealFlagConstant.SUB_RPT.getDealFlag());
        preValidateUserDao.submitUser(userInformation);

        //写记录表
//        preCommonDao.writeLog(userInformation);
        //写等待上报表--主体
        preValidateUserDao.writeUserLog(userInformation);
        //写等待上报表--带宽
        List<UserBandwidthInformation> bands = userInformation.getBandwidthList();
        if(bands!=null && !bands.isEmpty()){
            for (UserBandwidthInformation bandwidthInformation:bands){
                bandwidthInformation.setUserSeqId(userInformation.getUserSeqId());
                preValidateUserDao.writeUserBandLog(bandwidthInformation);
                bandwidthInformation.setDealFlag(DealFlagConstant.ChildDealFlagEum.UN_UPLOAD.getValue());
                preValidateUserDao.submitUserBand(bandwidthInformation);
            }
        }
        //写等待上报表--服务 && 服务域名
        List<UserServiceInformation> services = userInformation.getServiceList();
        if(services!=null && !services.isEmpty()){
            for (UserServiceInformation userServiceInformation:services){
                userServiceInformation.setUserSeqId(userInformation.getUserSeqId());
                preValidateUserDao.writeUserServiceLog(userServiceInformation);
                userServiceInformation.setDealFlag(DealFlagConstant.ChildDealFlagEum.UN_UPLOAD.getValue());
                preValidateUserDao.submitUserService(userServiceInformation);

                List<ServiceDomainInformation> domins = userServiceInformation.getDomainList();
                if (domins!=null && !domins.isEmpty()){
                    for (ServiceDomainInformation serviceDomainInformation:domins){
                        serviceDomainInformation.setUserSeqId(userInformation.getUserSeqId());
                        preValidateUserDao.writeUserServiceDomainLog(serviceDomainInformation);
                        serviceDomainInformation.setDealFlag(DealFlagConstant.ChildDealFlagEum.UN_UPLOAD.getValue());
                        preValidateUserDao.submitUserServiceDomain(serviceDomainInformation);
                    }
                }
            }
        }
        //写等待上报表--虚拟主机
        List<UserVirtualInformation> virtualLists = userInformation.getVirtualList();
        if(virtualLists!=null && !virtualLists.isEmpty()){
            for (UserVirtualInformation virtualInformation:virtualLists){
                virtualInformation.setUserSeqId(userInformation.getUserSeqId());
                preValidateUserDao.writeUserVirtualLog(virtualInformation);
                virtualInformation.setDealFlag(DealFlagConstant.ChildDealFlagEum.UN_UPLOAD.getValue());
                preValidateUserDao.submitUserVirtual(virtualInformation);
            }
        }
    }

    /**
     * 处理失败的经营者
     * @param idcInformation
     */
    public void handVarifyFail(IdcInformation idcInformation){
        idcInformation.setDealFlag(DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag());
        preValidateIdcDao.submitJyz(idcInformation);
    }


}
