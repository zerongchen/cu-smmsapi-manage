package com.aotain.smmsapi.task.prevalidate.service.impl;

import com.aotain.cu.serviceapi.model.HouseInformation;
import com.aotain.cu.serviceapi.model.IdcInformation;
import com.aotain.cu.serviceapi.model.UserInformation;
import com.aotain.cu.utils.ThreadLocalUtil;
import com.aotain.smmsapi.task.constant.DealFlagConstant;
import com.aotain.smmsapi.task.prevalidate.mapper.PreValidateUserDao;
import com.aotain.smmsapi.task.prevalidate.service.PreValidateUser;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.ArrayList;
import java.util.List;

@Service
public class PreValidateUserImpl implements PreValidateUser {

    private static Logger logger =  LoggerFactory.getLogger(PreValidateUserImpl.class);

    @Autowired
    private PreValidateUserDao preValidateUserDao;

    private IdcInformation idcInformation;

    private static long userSuccessCnt;
    private static long userFailCnt;

    private List<UserInformation> areadyVerifyByHouse;
    private List<UserInformation> userBatchConstructs =new ArrayList<UserInformation>();

    public void setIdcInformation( IdcInformation idcInformation ) {
        this.idcInformation = idcInformation;
    }

    public void setAreadyVerifyByHouse( List<UserInformation> areadyVerifyByHouse ) {
        this.areadyVerifyByHouse = areadyVerifyByHouse;
    }
    public void setUserBatchConstructs( List<UserInformation> list){
        this.userBatchConstructs.clear();
        userBatchConstructs.addAll(list);
    }

    public List<UserInformation> getUserBatchConstructs() {
        return userBatchConstructs;
    }

    @Override
    public void handleValidateUser() {
        try {
            userSuccessCnt=0;
            userFailCnt=0;
            UserInformation param = new UserInformation();
            param.setDealFlag(DealFlagConstant.RPT_VARIFY.getDealFlag());
            if (idcInformation!=null) param.setJyzId(idcInformation.getJyzId());
            List<UserInformation> userInformations = getValidateObj(param);
            if(userInformations!=null && !userInformations.isEmpty()){
                boolean flag;
                for (UserInformation userInformation:userInformations){
                    //判断该用户是否在机房阶段已经核验通过的(但机房下面的其他用户没有通过的),不用再次核验，因为核验
                    flag=false;
                    if (!areadyVerifyByHouse.isEmpty()){
                        interLoop:for (UserInformation verifyUser:areadyVerifyByHouse){
                            if (userInformation.getUserId().intValue()==verifyUser.getUserId().intValue()){
                                flag=true;
                                break interLoop;
                            }
                        }
                    }
                    if (!flag){
                        //这一部分用户对应的机房将会是上报失败的或者上报成功的,失败的已经走更新流程,接下来处理成功的
                        if (handUserInfo(userInformation)==DealFlagConstant.StatusEnum.SUCCESS){
//                            writeUserSuccessLog(userInformation);
                            userBatchConstructs.add(userInformation);
                            userSuccessCnt++;
                        }else {
                            userFailCnt++;
                        }
                    }
                }
            }
            userSuccessCnt=userSuccessCnt+(long)ThreadLocalUtil.get("userSuccessCnt");
            userFailCnt=userFailCnt+(long)ThreadLocalUtil.get("userFailCnt");
            ThreadLocalUtil.set("userSuccessCnt",userSuccessCnt);
            ThreadLocalUtil.set("userFailCnt",userFailCnt);
        }catch (Exception e){
            logger.error("handle validate User error ",e);
        }
    }

    public List<UserInformation> getValidateObj( UserInformation userInformation){
        try {
            List<UserInformation> userInformations = preValidateUserDao.getValidateUserList(userInformation);
            return userInformations;
        }catch (Exception e){
            logger.error("get validate User error ",e);
        }
        return null;
    }

    /**
     * 核验用户(成功的不操作，失败，等待的当场返回结果)
     * @param userInformation
     * @return
     */
    @Transactional(propagation = Propagation.REQUIRED,rollbackFor = Exception.class)
    @Override
    public DealFlagConstant.StatusEnum handUserInfo( UserInformation userInformation ) {
        if (userInformation==null) return DealFlagConstant.StatusEnum.WAITING;
        int userNum;
        UserInformation user = new UserInformation();
        List<HouseInformation> waitinghouse ;
        switch (userInformation.getOperateType()){
            //新增
            case 1:
                user.setUnitName(userInformation.getUnitName());
                if (userInformation.getIdType()!=null) user.setIdType(userInformation.getIdType());
                if (userInformation.getIdNumber()!=null) user.setIdNumber(userInformation.getIdNumber());
                userNum = preValidateUserDao.userNum(user);
                if (userNum>0){
                    //正式表存在该机房 核验失败 写数据库
                    userInformation.setVerificationResult("正式表存在该用户,新增失败");
                    userInformation.setDealFlag(DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag());
                    handVarifyFail(userInformation,null);
                    return DealFlagConstant.StatusEnum .FAIL;
                }
                List<HouseInformation> houseInformations = preValidateUserDao.getPreHouse(userInformation);

                if (houseInformations!=null && !houseInformations.isEmpty()){
                    waitinghouse = new ArrayList<HouseInformation>();
                    for (HouseInformation houseInformation:houseInformations){
                        if (!(houseInformation.getDealFlag().intValue()==DealFlagConstant.RPT_VARIFY.getDealFlag()
                                || houseInformation.getDealFlag().intValue()==DealFlagConstant.RPT_SUCCESS.getDealFlag()
                                || houseInformation.getDealFlag().intValue()==DealFlagConstant.SUB_RPT.getDealFlag()
                        )){
                            //用户占用的机房是上报审核中？或者上报成功的? 否的话，状态不变,等待
                            waitinghouse.add(houseInformation);
                        }
                    }
                    return handleWaiting(userInformation,waitinghouse);
                }else {
                    //用户所在机房为空
                    userInformation.setVerificationResult("该用户找不到对应的机房");
                    userInformation.setDealFlag(DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag());
                    handVarifyFail(userInformation,null);
                    return DealFlagConstant.StatusEnum .FAIL;
                }
            case 2:
                //修改
                user.setUserId(userInformation.getUserId());
                userNum=preValidateUserDao.userNum(user);
                if (userNum!=1){
                    //正式表存在该机房 核验失败 写数据库
                    userInformation.setVerificationResult("正式表不存在该用户,修改失败");
                    userInformation.setDealFlag(DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag());
                    handVarifyFail(userInformation,null);
                    return DealFlagConstant.StatusEnum .FAIL;
                }
                //提取用户的占用机房信息
                List<HouseInformation> preHouses = preValidateUserDao.getPreHouse(userInformation);
                waitinghouse = new ArrayList<HouseInformation>();
                if (!preHouses.isEmpty()){
                    for (HouseInformation houseInformation:preHouses){
                        if(!(houseInformation.getDealFlag().intValue()==DealFlagConstant.RPT_FAIL.getDealFlag()
                                || houseInformation.getDealFlag().intValue()==DealFlagConstant.RPT_VARIFY.getDealFlag()
                                || houseInformation.getDealFlag().intValue()==DealFlagConstant.SUB_RPT.getDealFlag()
                        )){
                            //如存在状态不是上报成功或者上报审核中的记录,等待
                            waitinghouse.add(houseInformation);
                        }
                    }
                }
                return handleWaiting(userInformation,waitinghouse);
            case 3:
                //删除
                user.setUserId(userInformation.getUserId());
                userNum=preValidateUserDao.userNum(user);
                if (userNum!=1){
                    //正式表存在该机房 核验失败 写数据库
                    userInformation.setVerificationResult("正式表不存在该用户,删除失败");
                    userInformation.setDealFlag(DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag());
                    handVarifyFail(userInformation,null);
                    return DealFlagConstant.StatusEnum .FAIL;
                }
                 //提取用户的占用机房信息
                List<HouseInformation> preHouseInformations = preValidateUserDao.getPreHouse(userInformation);
                if (preHouseInformations!=null && !preHouseInformations.isEmpty()){
                    waitinghouse = new ArrayList<HouseInformation>();
                    for (HouseInformation houseInformation:preHouseInformations){
                        //非上报审核中 或者非上报成功的
                        if (!(houseInformation.getDealFlag().intValue()==DealFlagConstant.RPT_VARIFY.getDealFlag()
                                || houseInformation.getDealFlag().intValue()==DealFlagConstant.RPT_SUCCESS.getDealFlag()
                                || houseInformation.getDealFlag().intValue()==DealFlagConstant.SUB_RPT.getDealFlag())){
                            //核验不成功，等待
                            waitinghouse.add(houseInformation);
                        }
                        return handleWaiting(userInformation,waitinghouse);
                    }
                }else {
                    //用户所在机房为空
                    userInformation.setVerificationResult("该用户找不到对应的机房");
                    userInformation.setDealFlag(DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag());
                    handVarifyFail(userInformation,null);
                    return DealFlagConstant.StatusEnum .FAIL;
                }
                break;
        }
        return DealFlagConstant.StatusEnum .WAITING;
    }

    /**
     * handle 核验不用通过的用户，没有太多逻辑，主要更新核验结果（或者加上deal_flag）
     * @param userInformation
     * @param list
     */
    public void handVarifyFail( UserInformation userInformation,  List<HouseInformation> list ) {
        preValidateUserDao.submitUser(userInformation);
    }

    /**
     * 需要等待的用户处理
     * @param userInformation
     * @param houseInformations
     * @return
     */
    public DealFlagConstant.StatusEnum handleWaiting(UserInformation userInformation ,List<HouseInformation> houseInformations){

        if (houseInformations.isEmpty()){
            return DealFlagConstant.StatusEnum.SUCCESS;
        }else {
            StringBuilder sb =new StringBuilder();
            for (HouseInformation house:houseInformations){
                sb.append(" "+house.getHouseName()+" "+DealFlagConstant.getDealDesc(house.getDealFlag())).append("\r\n");
            }
            UserInformation param = new UserInformation();
            param.setUserId(userInformation.getUserId());
            param.setVerificationResult(sb.toString());
            param.setDealFlag(DealFlagConstant.RPT_VARIFY_FAIL.getDealFlag());
            handVarifyFail(param,null);
            return DealFlagConstant.StatusEnum .WAITING;
        }
    }



}
